Index: app/src/main/java/live/wellconnect/wellconnect/components/AppComponentsUI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package live.wellconnect.wellconnect.components\n\nimport android.util.Log\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.ClickableText\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Visibility\nimport androidx.compose.material.icons.outlined.VisibilityOff\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Checkbox\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\nimport androidx.compose.ui.text.input.VisualTransformation\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport live.wellconnect.wellconnect.ui.theme.TextColor\nimport live.wellconnect.wellconnect.ui.theme.TextColorDark\nimport live.wellconnect.wellconnect.ui.theme.myFont\nimport live.wellconnect.wellconnect.ui.theme.myFontSemiBold\n\n@Composable\nfun MakeText(text : String, size : Int, color : Color, align : TextAlign) = Text(\n    text = text,\n    style = TextStyle(\n        fontSize = size.sp,\n        fontFamily = myFont,\n        fontWeight = FontWeight.Bold\n    ),\n    color = color,\n    textAlign = align\n)\n\n@Composable\nfun Space(size : Int) = Spacer(\n    modifier = Modifier\n        .height(size.dp)\n)\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MakeTextField(\n    labelValue: String,\n    icon: ImageVector?,\n    onTextChange : (String) -> Unit,\n    errorStatus : Boolean = false,\n) {\n    \n    val textValue = remember { mutableStateOf(\"\") }\n    \n    OutlinedTextField(\n        modifier = Modifier.fillMaxWidth(),\n        label = { Text(text = labelValue) },\n        colors = TextFieldDefaults.outlinedTextFieldColors(\n            focusedBorderColor = TextColor,\n            focusedLabelColor = TextColor,\n            cursorColor = TextColor,\n            placeholderColor = Color.White,\n        ),\n        keyboardOptions = KeyboardOptions.Default,\n        value = textValue.value,\n        onValueChange = {\n            textValue.value = it\n            onTextChange(it)\n            },\n        singleLine = true,\n        maxLines = 1,\n        isError = !errorStatus,\n        trailingIcon = {\n            if (icon != null) {\n                Image(imageVector = icon, contentDescription = \"Pencil Edit\")\n            }\n        },\n        shape = RoundedCornerShape(10.dp)\n    )\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MakeTextFieldPassword(\n    labelValue: String,\n    icon: ImageVector?,\n    onTextChange : (String) -> Unit,\n    errorStatus : Boolean = false,\n) {\n\n    val passwordValue = remember { mutableStateOf(\"\") }\n\n    val passwordIsVisible = remember { mutableStateOf(false) }\n\n    OutlinedTextField(\n        modifier = Modifier.fillMaxWidth(),\n        label = { Text(text = labelValue) },\n        colors = TextFieldDefaults.outlinedTextFieldColors(\n            focusedBorderColor = TextColor,\n            focusedLabelColor = TextColor,\n            cursorColor = TextColor,\n            placeholderColor = Color.White,\n        ),\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),\n        value = passwordValue.value,\n        onValueChange = {\n            passwordValue.value = it\n            onTextChange(it)\n            },\n        singleLine = true,\n        maxLines = 1,\n        isError = !errorStatus,\n        trailingIcon = {\n            if (icon != null) {\n                val iconImage = if(passwordIsVisible.value){\n                    Icons.Outlined.Visibility\n                }else {\n                    Icons.Outlined.VisibilityOff\n                }\n                IconButton(onClick = { passwordIsVisible.value = !passwordIsVisible.value }) {\n                    Image(imageVector = icon, contentDescription = \"Pencil Edit\")\n                }\n            }\n        },\n        visualTransformation = if(passwordIsVisible.value) VisualTransformation.None else PasswordVisualTransformation(),\n        shape = RoundedCornerShape(10.dp),\n    )\n\n}\n\n@Composable\nfun MyCheckBox(\n    text : String,\n    onCheckedChange : (Boolean) -> Unit,\n    onTextSelected: (String) -> Unit,\n) = Row(\n    Modifier\n        .fillMaxWidth()\n        .heightIn(70.dp),\n    verticalAlignment = Alignment.CenterVertically,\n) {\n    val checkState = remember { mutableStateOf(false) }\n    Checkbox(\n        checked = checkState.value,\n        onCheckedChange = {\n            checkState.value = it\n            onCheckedChange.invoke(it)\n        }\n    )\n    MyClickableText(text = text, onTextSelected)\n}\n\n@Composable\nfun MyClickableText(\n    text : String,\n    onTextSelected : (String) -> Unit)\n{\n    val initText = \"I've read and agree with the \"\n    val termText = \" Terms and Conditions\"\n    val secondText = \" and the\"\n    val privacyText = \" Privacy Policy.\"\n\n    val frankenText = buildAnnotatedString {\n        append(initText)\n        withStyle(style = SpanStyle(color = TextColor, fontFamily = myFont)) {\n            pushStringAnnotation(tag = termText, annotation = termText)\n            append(termText)\n        }\n        append(secondText)\n        withStyle(style = SpanStyle(color = TextColor, fontFamily = myFont)) {\n            pushStringAnnotation(tag = privacyText, annotation = privacyText)\n            append(privacyText)\n        }\n    }\n    ClickableText(\n        text = frankenText,\n        onClick = { clickText ->\n            frankenText.getStringAnnotations(clickText, clickText)\n                .firstOrNull()?.also { span ->\n                    Log.i(\"TAG\", \"{$span} es el texto click\")\n\n                    if (span.item == termText || span.item == privacyText) {\n                        onTextSelected(span.item)\n                    }\n                }\n        }\n    )\n}\n\n@Composable\nfun MyClickableTextLogin(\n    onTextSelected: () -> Unit\n)\n{\n    val initText = \"Not a member? \"\n    val termText = \" Register Now\"\n\n    val frankenText = buildAnnotatedString {\n        withStyle(style = SpanStyle(color = TextColorDark, fontFamily = myFontSemiBold)) {\n            append(initText)\n        }\n        withStyle(style = SpanStyle(color = TextColor, fontFamily = myFont)) {\n            pushStringAnnotation(tag = termText, annotation = termText)\n            append(termText)\n        }\n    }\n    ClickableText(\n        text = frankenText,\n        onClick = { clickText ->\n            frankenText.getStringAnnotations(clickText, clickText)\n                .firstOrNull()?.also { span ->\n                    Log.i(\"TAG\", \"{$span} es el texto click\")\n\n                    if (span.item == termText) {\n                        onTextSelected()\n                    }\n                }\n        }\n    )\n}\n\n@Composable\nfun MyButton(onClicked : () -> Unit, isEnabled : Boolean, text : String) = Button(\n    onClick = {\n        onClicked.invoke()\n    },\n    shape = RoundedCornerShape(10.dp),\n    modifier = Modifier\n        .fillMaxWidth()\n        .heightIn(50.dp),\n    colors = ButtonDefaults.buttonColors(TextColor),\n    enabled = isEnabled\n) {\n    Text(\n        text = text,\n        color = Color.Black\n    )\n}\n\n@Composable\nfun MyCustomButton(text: String, heigh: Int, width : Float, colorText : Color, colorButton : Color, onSigIn: () -> Unit) = Button(\n    onClick = { onSigIn() },\n    shape = RoundedCornerShape(10.dp),\n    modifier = Modifier\n        .fillMaxWidth(width)\n        .heightIn(heigh.dp),\n    colors = ButtonDefaults.buttonColors(colorButton)\n) {\n    Text(\n        text = text,\n        color = colorText\n    )\n}\n\n@Composable\nfun MyCustomImage(image : Int, height : Int, width : Int) = Image(\n    painter = painterResource(id = image),\n    contentDescription = \"Send a Message image\",\n    modifier = Modifier\n        .height(height.dp)\n        .width(width.dp)\n        .background(Color.Transparent)\n)\n\n@Composable\nfun MyCustomImageIcon(image: ImageVector, height: Int, width: Int) = Image(\n    imageVector = image,\n    contentDescription = \"Send a Message image\",\n    modifier = Modifier\n        .height(height.dp)\n        .width(width.dp)\n        .background(Color.Transparent)\n)\n\n@Composable\nfun MyTextButton(onClick : () -> Unit, text: String, align: TextAlign) = TextButton(\n        onClick = onClick,\n    ) {\n        Text(\n            text,\n            textAlign = align\n        )\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/live/wellconnect/wellconnect/components/AppComponentsUI.kt b/app/src/main/java/live/wellconnect/wellconnect/components/AppComponentsUI.kt
--- a/app/src/main/java/live/wellconnect/wellconnect/components/AppComponentsUI.kt	(revision 67a4bf850df8d919fd1591da2535d43347737501)
+++ b/app/src/main/java/live/wellconnect/wellconnect/components/AppComponentsUI.kt	(date 1693655136001)
@@ -187,12 +187,12 @@
 
     val frankenText = buildAnnotatedString {
         append(initText)
-        withStyle(style = SpanStyle(color = TextColor, fontFamily = myFont)) {
+        withStyle(style = SpanStyle(color = TextColorDark, fontFamily = myFont)) {
             pushStringAnnotation(tag = termText, annotation = termText)
             append(termText)
         }
         append(secondText)
-        withStyle(style = SpanStyle(color = TextColor, fontFamily = myFont)) {
+        withStyle(style = SpanStyle(color = TextColorDark, fontFamily = myFont)) {
             pushStringAnnotation(tag = privacyText, annotation = privacyText)
             append(privacyText)
         }
@@ -202,8 +202,6 @@
         onClick = { clickText ->
             frankenText.getStringAnnotations(clickText, clickText)
                 .firstOrNull()?.also { span ->
-                    Log.i("TAG", "{$span} es el texto click")
-
                     if (span.item == termText || span.item == privacyText) {
                         onTextSelected(span.item)
                     }
@@ -234,8 +232,6 @@
         onClick = { clickText ->
             frankenText.getStringAnnotations(clickText, clickText)
                 .firstOrNull()?.also { span ->
-                    Log.i("TAG", "{$span} es el texto click")
-
                     if (span.item == termText) {
                         onTextSelected()
                     }
