Index: app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeThird.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package live.wellconnect.wellconnect.presentation.sign_in\n\nimport android.widget.Toast\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Edit\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport live.wellconnect.wellconnect.R\nimport live.wellconnect.wellconnect.presentation.SignInState\n\n@Composable\nfun WelcomeThird(\n    welcomeThird : () -> Unit\n) {\n\n    val context = LocalContext.current\n    /*LaunchedEffect(key1 = state.signInError) {\n        state.signInError?.let { error ->\n            Toast.makeText(\n                context,\n                error,\n                Toast.LENGTH_LONG\n            ).show()\n        }\n    }*/\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(\n                brush = Brush.linearGradient(\n                    colors = listOf(colorResource(id = R.color.blueBackground), Color.White),\n                    start = Offset(0f, 300f),\n                    end = Offset(0f, 1650f), // Puedes ajustar el tamaño del degradado aquí\n\n                )\n\n            )\n    ) {\n        PhotoThird()\n        Box(\n            modifier = Modifier\n                .fillMaxSize() // El Box anidado ocupará todo el espacio del Box principal\n                .padding(16.dp), // Ajusta el espaciado si es necesario\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(10.dp)\n                    .wrapContentSize(align = Alignment.Center),\n                verticalArrangement = Arrangement.spacedBy(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n\n                ) {\n                LogoIcon()\n                LogoText()\n            }\n\n        }\n\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(start = 16.dp, end = 16.dp)\n                .wrapContentSize(align = Alignment.CenterStart),\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n\n            ) {\n\n        }\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            contentAlignment = Alignment.BottomCenter\n        ) {\n            Column(\n                modifier = Modifier\n                    .padding(start = 16.dp, top = 64.dp) // Ajusta el valor según el margen deseado\n            ) {\n\n                PaginationDots(itemCount = 3, currentItem = 2)\n\n                Text(\n                    text = \"Todas tus citas, a mano\",\n                    style = TextStyle(\n                        color = colorResource(id = R.color.blueFontText),\n                        fontSize = 30.sp, // Cambia el tamaño del texto aquí\n                        fontWeight = FontWeight.Black // Puedes ajustar el peso de la fuente si es necesario\n                    )\n                )\n                Spacer(modifier = Modifier.height(16.dp))\n                Text(\n                    \"Te ayudamos a gestionar todo tu historial médico y a estar a salvo en caso de crisis\",\n                    style = TextStyle(\n                        color = Color.Black,\n                        fontSize = 16.sp,\n                    )\n                )\n                Spacer(modifier = Modifier.height(12.dp))\n            Button(\n                onClick = welcomeThird,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(bottom = 16.dp),\n                shape = RoundedCornerShape(8.dp),\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = colorResource(id = R.color.blueFontText),\n                    contentColor = Color.White\n                ) //\n\n            ) {\n                Text(text = \"Me apunto\")\n            }\n        }\n\n    }\n}\n@Preview(showBackground = true)\n@Composable\nfun WelcomeThird_Preview() {\n    WelcomeThird(welcomeThird = {})\n\n}\n\n@Composable\nfun PhotoThird() {\n    Image(\n        painter = painterResource(id = R.drawable.welcomepicturethird),\n        contentDescription = \"Primera foto del bienvenida\",\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(550.dp),\n        contentScale = ContentScale.Crop,\n\n    )\n}\n@Preview(showBackground = true)\n@Composable\nfun PhotoThird_Preview() {\n    PhotoThird()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeThird.kt b/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeThird.kt
--- a/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeThird.kt	(revision 98c739d549be926043c1856f5fb98b459af5ce6c)
+++ b/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeThird.kt	(date 1694462234850)
@@ -65,15 +65,7 @@
 ) {
 
     val context = LocalContext.current
-    /*LaunchedEffect(key1 = state.signInError) {
-        state.signInError?.let { error ->
-            Toast.makeText(
-                context,
-                error,
-                Toast.LENGTH_LONG
-            ).show()
-        }
-    }*/
+
     Box(
         modifier = Modifier
             .fillMaxSize()
Index: app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeSecond.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package live.wellconnect.wellconnect.presentation.sign_in\n\nimport android.widget.Toast\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Edit\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport live.wellconnect.wellconnect.R\nimport live.wellconnect.wellconnect.presentation.SignInState\n\n@Composable\nfun WelcomeSecond(\n    welcomeTHird : () -> Unit\n) {\n\n    val context = LocalContext.current\n    /*LaunchedEffect(key1 = state.signInError) {\n        state.signInError?.let { error ->\n            Toast.makeText(\n                context,\n                error,\n                Toast.LENGTH_LONG\n            ).show()\n        }\n    }*/\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(\n                brush = Brush.linearGradient(\n                    colors = listOf(colorResource(id = R.color.blueBackground), Color.White),\n                    start = Offset(0f, 300f),\n                    end = Offset(0f, 1650f), // Puedes ajustar el tamaño del degradado aquí\n\n                )\n\n            )\n    ) {\n        PhotoSecond()\n        Box(\n            modifier = Modifier\n                .fillMaxSize() // El Box anidado ocupará todo el espacio del Box principal\n                .padding(16.dp), // Ajusta el espaciado si es necesario\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(top = 128.dp),\n                verticalArrangement = Arrangement.spacedBy(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n\n                ) {\n                LogoIcon()\n                LogoText()\n            }\n\n        }\n\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(start = 16.dp, end = 16.dp)\n                .wrapContentSize(align = Alignment.CenterStart),\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n\n            ) {\n\n        }\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            contentAlignment = Alignment.BottomCenter\n        ) {\n            Column(\n                modifier = Modifier\n                    .padding(start = 16.dp, top = 64.dp) // Ajusta el valor según el margen deseado\n            ) {\n\n                PaginationDots(itemCount = 3, currentItem = 1)\n\n                Text(\n                    text = \"Siempre Conectado\",\n                    style = TextStyle(\n                        color = colorResource(id = R.color.blueFontText),\n                        fontSize = 32.sp, // Cambia el tamaño del texto aquí\n                        fontWeight = FontWeight.Black // Puedes ajustar el peso de la fuente si es necesario\n                    )\n                )\n                Spacer(modifier = Modifier.height(16.dp))\n                Text(\n                    \"Te ayudamos a gestionar todo tu historial médico y a estar a salvo en caso de crisis\",\n                    style = TextStyle(\n                        color = Color.Black,\n                        fontSize = 16.sp,\n                    )\n                )\n                Spacer(modifier = Modifier.height(12.dp))\n            Button(\n                onClick = welcomeTHird ,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(bottom = 16.dp),\n                shape = RoundedCornerShape(8.dp),\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = colorResource(id = R.color.blueFontText),\n                    contentColor = Color.White\n                ) //\n\n            ) {\n                Text(text = \"Me apunto\")\n            }\n        }\n\n    }\n}\n@Preview(showBackground = true)\n@Composable\nfun WelcomeSecond_Preview() {\n    WelcomeSecond(welcomeTHird = {})\n}\n@Composable\nfun PaginationDotsSecond(\n    itemCount: Int,\n    currentItem: Int,\n    dotSize: Dp = 8.dp,\n    spacing: Dp = 4.dp,\n    activeColor: Color = Color.Blue,\n    inactiveColor: Color = Color.Gray,\n) {\n    Row(\n        horizontalArrangement = Arrangement.spacedBy(spacing),\n        verticalAlignment = Alignment.CenterVertically,\n        modifier = Modifier.padding(16.dp)\n    ) {\n        repeat(itemCount) { index ->\n            Dot(\n                isActive = index == currentItem,\n                activeColor = activeColor,\n                inactiveColor = inactiveColor,\n                size = dotSize\n            )\n        }\n    }\n}\n@Composable\n@Preview\nfun PaginationDotsSecond_Preview() {\n    Column {\n        PaginationDotsSecond(\n            itemCount = 3,\n            currentItem = 0,\n            dotSize = 12.dp,\n            spacing = 8.dp,\n            activeColor = colorResource(id = R.color.blueFontText),\n            inactiveColor = Color.Gray,\n        )\n    }\n}\n\n@Composable\nfun DotSecond(\n    isActive: Boolean,\n    activeColor: Color,\n    inactiveColor: Color,\n    size: Dp\n) {\n    Box(\n        modifier = Modifier\n            .size(size)\n            .clip(CircleShape)\n            .background(if (isActive) activeColor else inactiveColor)\n    )\n}\n@Composable\n@Preview\nfun DotSecond_Preview() {\n    Dot(\n        isActive = true,\n        activeColor = Color.Blue,\n        inactiveColor = Color.Gray,\n        size = 12.dp\n    )\n}\n\n@Composable\nfun PhotoSecond() {\n    Image(\n        painter = painterResource(id = R.drawable.welcomepicturetwo),\n        contentDescription = \"Primera foto del bienvenida\",\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(550.dp),\n        contentScale = ContentScale.Crop,\n\n    )\n}\n@Preview(showBackground = true)\n@Composable\nfun PhotoSecond_Preview() {\n    PhotoSecond()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeSecond.kt b/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeSecond.kt
--- a/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeSecond.kt	(revision 98c739d549be926043c1856f5fb98b459af5ce6c)
+++ b/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeSecond.kt	(date 1694462244019)
@@ -65,15 +65,7 @@
 ) {
 
     val context = LocalContext.current
-    /*LaunchedEffect(key1 = state.signInError) {
-        state.signInError?.let { error ->
-            Toast.makeText(
-                context,
-                error,
-                Toast.LENGTH_LONG
-            ).show()
-        }
-    }*/
+
     Box(
         modifier = Modifier
             .fillMaxSize()
Index: app/src/test/java/live/wellconnect/wellconnect/presentation/register/register_ex/RegisterViewModelContinueTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package live.wellconnect.wellconnect.presentation.register.register_ex\n\n//import androidx.arch.core.executor.testing.InstantTaskExecutorRule\nimport androidx.arch.core.executor.DefaultTaskExecutor\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.Observer\nimport com.google.firebase.firestore.util.Assert.fail\nimport io.mockk.coEvery\nimport io.mockk.*\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.coroutines.test.TestCoroutineDispatcher\nimport kotlinx.coroutines.test.TestCoroutineScope\nimport kotlinx.coroutines.test.UnconfinedTestDispatcher\nimport kotlinx.coroutines.test.resetMain\nimport kotlinx.coroutines.test.setMain\nimport live.wellconnect.wellconnect.data.DataRepository\nimport live.wellconnect.wellconnect.domain.BloodType\nimport live.wellconnect.wellconnect.domain.Country\nimport live.wellconnect.wellconnect.domain.Gender\nimport live.wellconnect.wellconnect.domain.Implants\nimport live.wellconnect.wellconnect.domain.Religion\nimport live.wellconnect.wellconnect.domain.UserModel\nimport live.wellconnect.wellconnect.domain.UserModelDTO\nimport live.wellconnect.wellconnect.utils.getOrAwaitValue\nimport org.junit.After\nimport org.junit.Assert.assertEquals\nimport org.junit.Before\nimport org.junit.Rule\nimport org.junit.Test\n\n\nclass RegisterViewModelContinueTest {\n\n    @get:Rule\n    val instantTaskExecutorRule = InstantTaskExecutorRule()\n\n    private lateinit var viewModel: RegisterViewModelContinue\n    private lateinit var repository: DataRepository\n    private val testDispatcher = UnconfinedTestDispatcher()\n\n\n    @Before\n    fun setup() {\n        Dispatchers.setMain(testDispatcher)\n        repository = mockk()\n        viewModel = RegisterViewModelContinue(repository)\n    }\n\n    @Test\n    fun `WHEN send an id EXPECTED the user asociated to this id`() = runBlocking {\n        // GIVEN\n        val uID = \"uX2yRDaY4RTGdalsFYLpPEXIBrU2\"\n        val userRegister = UserModelDTO(\"Roberto\", \"rmc@gmail.com\", \"123456\")\n        coEvery { repository.checkUser(uID) } returns (userRegister)\n\n        // WHEN\n        viewModel.getUserValues(uID)\n        val actualLiveData = viewModel.dataUser.getOrAwaitValue()\n\n        assert(actualLiveData.email == userRegister.email)\n    }\n    /*Este test verifica que, cuando se llama al método getUserValues con un ID específico (uID),\n    el LiveData dataUser se actualiza con un objeto de usuario (UserModelDTO) asociado a ese ID.\n    Se configura el comportamiento simulado del repository para devolver el usuario\n    esperado (userRegister) cuando se llama a checkUser(uID).\n     */\n    @Test\n    fun `addUser should call repository insertUser with correct parameters`() = runBlocking {\n        // GIVEN\n        val userModel = UserModel(\"Roberto\",Gender.MALE,\"\",Country.PANAMA,34,1234567,Religion.CATHOLIC,BloodType.Bminus,\n            listOf(Implants.OTHER)\n        )\n        val userId = \"user123\"\n\n        // WHEN\n        viewModel.addUser(userModel, userId)\n\n        // THEN\n        coVerify { repository.insertUser(userModel, userId) }\n    }\n    /*Este test verifica que el método addUser del viewModel llama correctamente\n    al método insertUser del repository con los parámetros esperados (userModel y userId).\n    Se configura el viewModel y el repository simulado para realizar esta verificación.\n    Este test asegura que la interacción entre el viewModel y el repository es la\n    correcta al agregar un usuario.\n     */\n\n    @After\n    fun tearDown() {\n        Dispatchers.resetMain()\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/live/wellconnect/wellconnect/presentation/register/register_ex/RegisterViewModelContinueTest.kt b/app/src/test/java/live/wellconnect/wellconnect/presentation/register/register_ex/RegisterViewModelContinueTest.kt
--- a/app/src/test/java/live/wellconnect/wellconnect/presentation/register/register_ex/RegisterViewModelContinueTest.kt	(revision 98c739d549be926043c1856f5fb98b459af5ce6c)
+++ b/app/src/test/java/live/wellconnect/wellconnect/presentation/register/register_ex/RegisterViewModelContinueTest.kt	(date 1694461491556)
@@ -2,6 +2,7 @@
 
 //import androidx.arch.core.executor.testing.InstantTaskExecutorRule
 import androidx.arch.core.executor.DefaultTaskExecutor
+import androidx.arch.core.executor.testing.InstantTaskExecutorRule
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.Observer
 import com.google.firebase.firestore.util.Assert.fail
Index: app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeFirst.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package live.wellconnect.wellconnect.presentation.sign_in\n\nimport android.widget.Toast\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Edit\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport live.wellconnect.wellconnect.R\nimport live.wellconnect.wellconnect.presentation.SignInState\n\n@Composable\nfun WelcomeFirst(\n    welcomeSecond : () -> Unit\n) {\n\n    val context = LocalContext.current\n    /*LaunchedEffect(key1 = state.signInError) {\n        state.signInError?.let { error ->\n            Toast.makeText(\n                context,\n                error,\n                Toast.LENGTH_LONG\n            ).show()\n        }\n    }*/\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(\n                brush = Brush.linearGradient(\n                    colors = listOf(colorResource(id = R.color.blueBackground), Color.White),\n                    start = Offset(0f, 300f),\n                    end = Offset(0f, 1650f), // Puedes ajustar el tamaño del degradado aquí\n\n                )\n\n            )\n    ) {\n        PhotoFirst()\n        Box(\n            modifier = Modifier\n                .fillMaxSize() // El Box anidado ocupará todo el espacio del Box principal\n                .padding(16.dp), // Ajusta el espaciado si es necesario\n            contentAlignment = Alignment.Center\n        ) {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(10.dp)\n                    .wrapContentSize(align = Alignment.Center),\n                verticalArrangement = Arrangement.spacedBy(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n\n                ) {\n                LogoIcon()\n                LogoText()\n            }\n\n        }\n\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(start = 16.dp, end = 16.dp)\n                .wrapContentSize(align = Alignment.CenterStart),\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n\n            ) {\n\n        }\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(16.dp),\n            contentAlignment = Alignment.BottomCenter\n        ) {\n            Column(\n                modifier = Modifier\n                    .padding(start = 16.dp, top = 64.dp) // Ajusta el valor según el margen deseado\n            ) {\n\n                PaginationDots(itemCount = 3, currentItem = 0)\n\n                Text(\n                    text = \"Bienvenidos a WellConnect\",\n                    style = TextStyle(\n                        color = colorResource(id = R.color.blueFontText),\n                        fontSize = 32.sp, // Cambia el tamaño del texto aquí\n                        fontWeight = FontWeight.Black // Puedes ajustar el peso de la fuente si es necesario\n                    )\n                )\n                Spacer(modifier = Modifier.height(16.dp))\n                Text(\n                    \"Te ayudamos a gestionar todo tu historial médico y a estar a salvo en caso de crisis\",\n                    style = TextStyle(\n                        color = Color.Black,\n                        fontSize = 16.sp,\n                    )\n                )\n                Spacer(modifier = Modifier.height(12.dp))\n            Button(\n                onClick = welcomeSecond,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(bottom = 16.dp),\n                shape = RoundedCornerShape(8.dp),\n                colors = ButtonDefaults.buttonColors(\n                    containerColor = colorResource(id = R.color.blueFontText),\n                    contentColor = Color.White\n                ) //\n\n            ) {\n                Text(text = \"Me apunto\")\n            }\n        }\n\n    }\n}\n@Preview(showBackground = true)\n@Composable\nfun WelcomeFirst_Preview() {\n    WelcomeFirst(welcomeSecond = {})\n\n}\n@Composable\nfun PaginationDots(\n    itemCount: Int,\n    currentItem: Int,\n    dotSize: Dp = 8.dp,\n    spacing: Dp = 4.dp,\n    activeColor: Color = Color.Blue,\n    inactiveColor: Color = Color.Gray,\n) {\n    Row(\n        horizontalArrangement = Arrangement.spacedBy(spacing),\n        verticalAlignment = Alignment.CenterVertically,\n        modifier = Modifier.padding(16.dp)\n    ) {\n        repeat(itemCount) { index ->\n            Dot(\n                isActive = index == currentItem,\n                activeColor = activeColor,\n                inactiveColor = inactiveColor,\n                size = dotSize\n            )\n        }\n    }\n}\n@Composable\n@Preview\nfun PreviewPaginationDots() {\n    Column {\n        PaginationDots(\n            itemCount = 3,\n            currentItem = 0,\n            dotSize = 12.dp,\n            spacing = 8.dp,\n            activeColor = colorResource(id = R.color.blueFontText),\n            inactiveColor = Color.Gray,\n        )\n    }\n}\n\n@Composable\nfun Dot(\n    isActive: Boolean,\n    activeColor: Color,\n    inactiveColor: Color,\n    size: Dp\n) {\n    Box(\n        modifier = Modifier\n            .size(size)\n            .clip(CircleShape)\n            .background(if (isActive) activeColor else inactiveColor)\n    )\n}\n@Composable\n@Preview\nfun PreviewDot() {\n    Dot(\n        isActive = true,\n        activeColor = Color.Blue,\n        inactiveColor = Color.Gray,\n        size = 12.dp\n    )\n}\n\n@Composable\nfun PaginationExample() {\n    var currentPage by remember { mutableStateOf(0) }\n\n    // Assuming you have a ViewPager or similar component\n    // that provides the current page index\n    // For demonstration, let's update the current page index manually\n    // You would replace this with your actual logic for tracking the current page\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        PaginationDots(\n            itemCount = 5,\n            currentItem = currentPage,\n        )\n    }\n}\n@Composable\nfun PhotoFirst() {\n    Image(\n        painter = painterResource(id = R.drawable.welcomepictureone),\n        contentDescription = \"Primera foto del bienvenida\",\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(550.dp),\n        contentScale = ContentScale.Crop,\n\n    )\n}\n@Preview(showBackground = true)\n@Composable\nfun PhotoFirst_Preview() {\n    PhotoFirst()\n}\n@Composable\nfun LogoText() {\n    Image(\n        painter = painterResource(id = R.drawable.textologo),\n        contentDescription = \"Nombre de la aplicación\",\n        modifier = Modifier\n            .height(40.26.dp)\n            .width(359.dp)\n            .background(Color.Transparent)\n            .padding(start = 32.dp, end = 32.dp),\n\n    )\n}\n@Preview(showBackground = true)\n@Composable\nfun LogoText_Preview() {\n    LogoText()\n}\n@Composable\nfun LogoIcon() {\n    Image(\n        painter = painterResource(id = R.drawable.icoqr),\n        contentDescription = \"Logo de la aplicación\",\n        modifier = Modifier\n            .height(71.dp)\n            .width(71.dp)\n            .background(Color.Transparent)\n\n        )\n}\n@Preview(showBackground = true)\n@Composable\nfun LogoIcon_Preview() {\n    LogoIcon()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeFirst.kt b/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeFirst.kt
--- a/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeFirst.kt	(revision 98c739d549be926043c1856f5fb98b459af5ce6c)
+++ b/app/src/main/java/live/wellconnect/wellconnect/presentation/welcome/WelcomeFirst.kt	(date 1694462274932)
@@ -65,15 +65,7 @@
 ) {
 
     val context = LocalContext.current
-    /*LaunchedEffect(key1 = state.signInError) {
-        state.signInError?.let { error ->
-            Toast.makeText(
-                context,
-                error,
-                Toast.LENGTH_LONG
-            ).show()
-        }
-    }*/
+
     Box(
         modifier = Modifier
             .fillMaxSize()
Index: app/src/main/java/live/wellconnect/wellconnect/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package live.wellconnect.wellconnect\n\n\nimport android.annotation.SuppressLint\nimport android.app.Application\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.compose.setContent\nimport androidx.activity.result.IntentSenderRequest\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.lifecycleScope\nimport com.google.android.gms.auth.api.identity.Identity\nimport kotlinx.coroutines.launch\nimport live.wellconnect.wellconnect.presentation.sign_in.GoogleAuthUiClient\nimport live.wellconnect.wellconnect.ui.theme.WellconnectTheme\nimport androidx.compose.runtime.getValue\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport live.wellconnect.wellconnect.presentation.SignInViewModel\nimport androidx.activity.viewModels\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.jmoreno.mispruebasparawell.RegisterSecond\nimport com.google.firebase.FirebaseApp\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.ktx.Firebase\nimport dagger.hilt.android.AndroidEntryPoint\nimport live.wellconnect.wellconnect.data.local.SharedPreferenceServiceImpl\nimport live.wellconnect.wellconnect.presentation.SignInScreen\nimport live.wellconnect.wellconnect.presentation.profile.ProfileScreen\nimport live.wellconnect.wellconnect.presentation.profile.ProfileScreenViewModel\nimport live.wellconnect.wellconnect.presentation.register.Register\nimport live.wellconnect.wellconnect.presentation.register.RegisterScreen\nimport live.wellconnect.wellconnect.presentation.register.RegisterViewModel\nimport live.wellconnect.wellconnect.presentation.register.register_ex.RegisterFirst\nimport live.wellconnect.wellconnect.presentation.register.register_ex.RegisterViewModelContinue\nimport live.wellconnect.wellconnect.presentation.sign_in.OnBoardingCircle\nimport live.wellconnect.wellconnect.presentation.sign_in.OnBoardingFirst\nimport live.wellconnect.wellconnect.presentation.sign_in.OnBoardingSecond\nimport live.wellconnect.wellconnect.presentation.sign_in.WelcomeFirst\nimport live.wellconnect.wellconnect.presentation.sign_in.WelcomeSecond\nimport live.wellconnect.wellconnect.presentation.sign_in.WelcomeThird\n\n\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n\n    private val registerViewModelEx : RegisterViewModelContinue by viewModels()\n    private val registerViewModel: RegisterViewModel by viewModels()\n    private val profileViewModel: ProfileScreenViewModel  by viewModels()\n\n    private val googleAuthUiClient by lazy {\n        GoogleAuthUiClient(\n            context = applicationContext,\n            oneTapClient = Identity.getSignInClient(applicationContext)\n        )\n    }\n\n    @SuppressLint(\"ComposableDestinationInComposeScope\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        SharedPreferenceServiceImpl.init(applicationContext)\n        setContent {\n            WellconnectTheme {\n                    // A surface container using the 'background' color from the theme\n                    Surface(\n                        modifier = Modifier.fillMaxSize(),\n                        color = MaterialTheme.colorScheme.background\n                    ) {\n                        val navController = rememberNavController()\n                       // NavHost(navController = navController, startDestination = \"sign_in\") {\n                        NavHost(navController = navController, startDestination = \"onboarding_one\") {\n\n\n                            composable(\"onboarding_one\"){\n                                WelcomeFirst(\n                                    welcomeSecond = { navController.navigate(\"onboarding_two\") }\n                                )\n                            }\n\n                            composable(\"onboarding_two\"){\n                                WelcomeSecond {\n                                    navController.navigate(\"onboarding_three\")\n                                }\n                            }\n\n                            composable(\"onboarding_three\"){\n                                WelcomeThird{\n                                    navController.navigate(\"sign_in\")\n                                }\n                            }\n\n                            composable(\"sign_in\") {\n                                val viewModel = viewModel<SignInViewModel>()\n                                val state by viewModel.state.collectAsStateWithLifecycle()\n\n                                LaunchedEffect(key1 = Unit) {\n                                    if(googleAuthUiClient.getSignedInUser() != null) {\n                                        navController.navigate(\"profile\")\n                                    }\n                                }\n\n                                val launcher = rememberLauncherForActivityResult(\n                                    contract = ActivityResultContracts.StartIntentSenderForResult(),\n                                    onResult = { result ->\n                                        if(result.resultCode == RESULT_OK) {\n                                            lifecycleScope.launch {\n                                                val signInResult = googleAuthUiClient.signInWithIntent(\n                                                    intent = result.data ?: return@launch\n                                                )\n                                                viewModel.onSignInResult(signInResult)\n                                            }\n                                        }\n                                    }\n                                )\n\n\n                                LaunchedEffect(key1 = state.isSignInSuccessful, key2 = state.registerState) {\n                                    if(state.isSignInSuccessful) {\n                                        Toast.makeText(\n                                            applicationContext,\n                                            \"Sign in successful\",\n                                            Toast.LENGTH_LONG\n                                        ).show()\n\n                                        navController.navigate(\"profile\")\n                                        viewModel.resetState()\n                                    }\n\n                                    if(state.registerState) {\n                                        Toast.makeText(\n                                            applicationContext,\n                                            \"Register\",\n                                            Toast.LENGTH_LONG\n                                        ).show()\n\n                                        navController.navigate(\"register\")\n                                        viewModel.resetState()\n                                    }\n                                }\n\n\n                                SignInScreen(\n                                    state = state,\n                                    onSignInClick = {\n                                        lifecycleScope.launch {\n                                            val signInIntentSender = googleAuthUiClient.signIn()\n                                            launcher.launch(\n                                                IntentSenderRequest.Builder(\n                                                    signInIntentSender ?: return@launch\n                                                ).build()\n                                            )\n                                        }\n                                    },\n                                    onRegisterClick = {\n                                        Log.i(\"PUSH_REG\", \"PRESIONA DESDE REG\")\n                                        navController.navigate(\"register\")\n                                    },\n                                    viewModel,\n                                )\n\n\n\n                            }\n\n\n                            composable(\"profile\") {\n                                ProfileScreen(\n                                    userData = googleAuthUiClient.getSignedInUser(),\n                                    onSignOut = {\n                                        lifecycleScope.launch {\n                                            googleAuthUiClient.signOut()\n                                            Toast.makeText(\n                                                applicationContext,\n                                                \"Signed out\",\n                                                Toast.LENGTH_LONG\n                                            ).show()\n\n                                            navController.popBackStack()\n                                        }\n                                    },\n                                    profileViewModel,\n                                    onRegContinue = {\n                                        navController.navigate(\"register_first\")\n                                    },\n                                )\n                            }\n\n                            composable(\"register\") {\n                                RegisterScreen(registerViewModel)\n                               // navController.popBackStack()\n                            }\n\n                            composable(\"register_continue\") {\n                                Register(userData = googleAuthUiClient.getSignedInUser(), registerViewModelEx)\n                                //navController.popBackStack()  // todo, chequear porque sobreescirbe en empty la pantalla\n                            }\n                            composable(\"register_first\") {\n                                RegisterFirst(userData = googleAuthUiClient.getSignedInUser(),registerViewModelEx, onRegContinue = {\n                                    navController.navigate(\"register_second\")\n                                })\n                                // navController.popBackStack()\n                            }\n                            composable(\"register_second\") {\n                                RegisterSecond(navController = navController, userData = googleAuthUiClient.getSignedInUser(),registerViewModelEx, onRegContinue = {\n                                    navController.navigate(\"\")\n                                }, navigateBack = {})\n                                // navController.popBackStack()\n                            }\n\n\n                        }\n                    }\n\n            }\n        }\n    }\n}\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/live/wellconnect/wellconnect/MainActivity.kt b/app/src/main/java/live/wellconnect/wellconnect/MainActivity.kt
--- a/app/src/main/java/live/wellconnect/wellconnect/MainActivity.kt	(revision 98c739d549be926043c1856f5fb98b459af5ce6c)
+++ b/app/src/main/java/live/wellconnect/wellconnect/MainActivity.kt	(date 1694464067385)
@@ -58,6 +58,7 @@
     private val registerViewModelEx : RegisterViewModelContinue by viewModels()
     private val registerViewModel: RegisterViewModel by viewModels()
     private val profileViewModel: ProfileScreenViewModel  by viewModels()
+    private val signInViewModel : SignInViewModel by viewModels()
 
     private val googleAuthUiClient by lazy {
         GoogleAuthUiClient(
@@ -66,7 +67,7 @@
         )
     }
 
-    @SuppressLint("ComposableDestinationInComposeScope")
+    @SuppressLint("ComposableDestinationInComposeScope", "StateFlowValueCalledInComposition")
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
@@ -79,8 +80,16 @@
                         color = MaterialTheme.colorScheme.background
                     ) {
                         val navController = rememberNavController()
-                       // NavHost(navController = navController, startDestination = "sign_in") {
-                        NavHost(navController = navController, startDestination = "onboarding_one") {
+                       // val state by signInViewModel.state.collectAsStateWithLifecycle()
+                        var destinyInit = ""
+
+                        destinyInit = if (signInViewModel.state.value.isSignInSuccessful) {
+                            "onboarding_one"
+                        } else {
+                            "sign_in"
+                        }
+                        //NavHost(navController = navController, startDestination = "onboarding_one") {
+                        NavHost(navController = navController, startDestination = destinyInit) {
 
 
                             composable("onboarding_one"){
@@ -167,7 +176,7 @@
                                         Log.i("PUSH_REG", "PRESIONA DESDE REG")
                                         navController.navigate("register")
                                     },
-                                    viewModel,
+                                    viewModel
                                 )
 
 
